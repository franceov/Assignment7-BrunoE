Design Memo (Hospital Intake System)

Binary trees are a natural fit for the doctor reporting structure because they model hierarchical relationships where each manager can have up to two direct reports. This mirrors real-world org charts and enables clean recursive operations. Recursion works well here because each subtree is itself a tree: the same visit logic (preorder, inorder, postorder) applies uniformly at every node.

Traversal choice depends on the workflow. Preorder (root → left → right) is useful for top‑down reporting or exporting a manager-first roster. Inorder (left → root → right) is ideal when the left/right ordering has a semantic meaning (e.g., junior vs. senior) and you want a sorted-like walk through that ordering. Postorder (left → right → root) supports bottom‑up tasks such as aggregating metrics (e.g., counting reports, allocating budgets) before notifying a manager, or safely deleting an entire subtree only after its children have been handled.

For the emergency intake, a min-heap priority queue ensures the most urgent patient (lowest numeric urgency) is always at the root and can be retrieved in O(log n) time after O(log n) insertion. Heapify-up restores order after insertions; heapify-down restores order after removals. Unlike full sorting on every update (O(n log n)), a heap supports continuous, real-time arrivals and departures efficiently. This models ER triage well: every new patient gets placed quickly, and the next patient to serve is always accessible in O(1) for peek and O(log n) to remove. Together, these structures demonstrate choosing data structures based on access patterns: hierarchical reporting vs. continually changing priority scheduling.
